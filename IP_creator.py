import os

core_name = "k_jorge"
print("Here is your core: " + core_name)

#Directories: src, doc, tb, project_tcl
os.makedirs(core_name + '/src', exist_ok=True)
os.makedirs(core_name + '/tb', exist_ok=True)
os.makedirs(core_name + '/doc', exist_ok=True)
os.makedirs(core_name + '/project_tcl', exist_ok=True)

#------------------- k_core -------------------
#File: README.md
file = open(core_name + "/README.md", "w")
#file.write("![Kera logo ](doc/logo.png)\n")
file.write("# "+ core_name + "\n")
file.write("\n" )
file.write("- Information for [Integration](./doc/README_integration.md 'Integration') \n" )
file.write("- Information for [Development](./doc/README_development.md 'Development') \n" )
file.write("" )
file.close()

#File: package.json
file = open(core_name + "/package.json", "w")
file.write("{\n" )
file.write("    \"name\": " + "\"" + core_name + "\",\n" )
file.write("    \"version\": \"1.0.0\",\n")
file.write("    \"description\": \"ip core "  + core_name + "\",\n")
file.write("    \"revision\": \"1\",\n" )
file.write("    \"keywords\": [\n")
file.write("        \"vhdl\"\n" )
file.write("    ],\n" )
file.write("    \"files\": [\n" )
file.write("        \"doc\",\n" )
file.write("        \"src\",\n")
file.write("        \"xgui\",\n" )
file.write("        \"component.xml\",\n" )
file.write("        \"README_integration.md\"\n" )
file.write("    ],\n" )
file.write("    \"dependencies\": {\n")
file.write("        \"fpga_tools\": \"git+http://kservercode1:7990/scm/dev/fpga_tools.git#master\",\n" )
file.write("        \"shelljs\": \"0.8.2\",\n" )
file.write("        \"colors\": \"x\"\n" )
file.write("    },\n" )
file.write("    \"homepage\": \"https://kservercode1:7990/scm/cir/k_test_ck10_dap5583/src/master/README.md\",\n" )
file.write("    \"bugs\": {\n" )
file.write("        \"url\": \"https://kservercode1:7990/scm/cir/k_test_ck10_dap5583/issues\"\n")
file.write("    },\n" )
file.write("    \"src\": [],\n" )
file.write("    \"scripts\": {\n" )
file.write("        \"postinstall\": \"echo This is "+ core_name + " core\",\n" )
file.write("        \"package\": \"node node_modules/fpga_tools/.scripts/Kera_node\",\n" )
file.write("        \"dependencies\": \"npm install --global-style\",\n")
file.write("        \"githooks\": \"node node_modules/fpga_tools/.scripts/Kera_node githooks\",\n")
file.write("        \"regenerate\": \"node node_modules/fpga_tools/.scripts/Kera_node regenerate\",\n" )
file.write("        \"synt\": \"node node_modules/fpga_tools/.scripts/Kera_node synt\",\n" )
file.write("        \"impl\": \"node node_modules/fpga_tools/.scripts/Kera_node impl\",\n")
file.write("        \"timing\": \"node node_modules/fpga_tools/.scripts/Kera_node timing\",\n" )
file.write("        \"resources\": \"node node_modules/fpga_tools/.scripts/Kera_node resources\",\n")
file.write("        \"full\": \"npm run dependencies && npm run regenerate && npm run build\",\n")
file.write("        \"build\": \"node node_modules/fpga_tools/.scripts/Kera_node build\"\n" )
file.write("    },\n" )
file.write("    \"author\": \"FPGA\"\n" )
file.write("}\n")
file.close()

#File:  Jenkinsfile
file = open(core_name + "/Jenkinsfile", "w")
file.write("pipeline {\n" )
file.write("    agent none\n" )
file.write("\n" )
file.write("    stages {\n" )
file.write("        stage('build_"+core_name+"') {\n" )
file.write("            agent {\n")
file.write("            docker { image 'kerajet_simulators:0.3' }\n")
file.write("            }\n")
file.write("                steps {\n")
file.write("                    echo 'sh cd tb;python *.py'\n" )
file.write("                }\n")
file.write("            }\n" )
file.write("            stage (package_core){\n")
file.write("                agent {\n")
file.write("                docker { image 'vivado:2019.2.12'\n")
file.write("                    args '--network=host --init'}\n")
file.write("                }\n")
file.write("                environment {\n")
file.write("                npm_config_cache = 'npm-cache'\n")
file.write("                }\n")
file.write("                steps {\n")
file.write("                    withNPM(npmrcConfig: 'kera_mirror_registry') {\n")
file.write("                        sh '''\n")
file.write("                            export PATH=/tools/Xilinx/Vivado/2019.2/bin:$PATH\n")
file.write("                            npm install --global-style\n")
file.write("                            npm run package\n")
file.write("                        '''\n")
file.write("                            echo 'IP-XACT Created'	\n")
file.write("                        }\n")
file.write("                }\n")
file.write("            }\n")
file.write("            stage('publish') {\n")
file.write("                agent any\n")
file.write("                tools{nodejs \"node\"}\n")
file.write("                steps {\n")
file.write("                    withNPM(npmrcConfig: 'ip_core_registry') {\n")
file.write("                        sh 'npm publish'\n")
file.write("                        echo 'NPM Package Published'\n")
file.write("                    }\n")
file.write("                }\n")
file.write("            }\n")
file.write("        }\n")
file.write("    }\n")
file.close()

#File:  .gitignore
file = open(core_name + "/.gitignore", "w")
file.write("/.project\n")
file.write("vivado_prj/**\n")
file.write("src/**\n")
file.write("xgui/\n")
file.write("node_modules/\n")
file.write("vunit_out/\n")
file.write("html/\n")
file.write("tmp\n")
file.write("*.gcda\n")
file.write("*.gcno\n")
file.write("*.info\n")
file.write("*.o\n")
file.write("*.cf\n")
file.write("*.txt\n")
file.write("*.tmp\n")
file.write("*.csv\n")
file.write("*.project\n")
file.write("*.pyc\n")
file.write("*.s\n")
file.write("out.xml\n")
file.write("modelsim.do\n")
file.write("package-lock.json\n")
file.write("\n")
file.write("#Allow\n")
file.write("!project_tcl/*.txt\n")
file.write("!doc/*.txt\n")
file.write("!src/*.bd\n")
file.write("!src/*.vhd\n")
file.write("!src/*.xdc\n")
file.close()

#------------------- k_core/src -------------------
#File: main source vhd
file = open(core_name +"/src/" + core_name +".vhd", "w")
file.write("-----   Description here   -----\n")
file.write("--! FILE: "+core_name+"\n")
file.write("--!\n")
file.write("--!\n")
file.write("library ieee;\n")
file.write("use ieee.std_logic_1164.all;\n")
file.write("use ieee.std_logic_arith.all;\n")
file.write("use ieee.std_logic_unsigned.all;\n")
file.write("use ieee.numeric_std.all;\n")
file.write("\n")
file.write("entity " + core_name + " is\n")
file.write("	generic(\n")
file.write("		param : integer:= 64\n")
file.write("	);\n")
file.write("	port (\n")
file.write("		-- Inputs --\n")
file.write("		iCLK				: in std_logic; --! se単al de reloj\n")
file.write("		iRST_n 				: in std_logic --! se単al de reset\n")
file.write("		-- Outputs --\n")
file.write("        --oOUT_bit			: out std_logic; \n")
file.write("        --oOUT_vector		: out std_logic_vector(7 downto 0); \n")
file.write("	);\n")
file.write("end "+core_name+";\n")
file.write("\n")
file.write("architecture RTL of "+core_name+" is\n")
file.write("\n")
file.write("-------   Signals   ------\n")
file.write("    --type state_type is (IDLE,S0,S1);\n")
file.write("    --signal state 		: state_type;\n")
file.write("    --signal scount 	: std_logic;\n")
file.write("\n")
file.write("begin\n")
file.write("\n")
file.write("-----   Assignments   -----\n")
file.write("\n")
file.write("--------  Process  --------\n")
file.write("\n")
file.write("    proceso: process(iCLK)\n")
file.write("    begin\n")
file.write("        if(iRST_n = '0') then\n")
file.write("            --oOUT_bit <= '0'\n")
file.write("            --oOUT_vector <= (others => '0')\n")
file.write("        else\n")
file.write("            --your function\n")
file.write("        end if;\n")
file.write("    end process;\n")
file.write("\n")
file.write("end RTL;\n")
file.write("\n")
file.close()

#------------------- k_core/tb -------------------
#File: main testbench vhd
file = open(core_name +"/tb/" + core_name +"_tb.vhd", "w")
file.write("-----   Description here   -----\n")
file.write("--! FILE: "+core_name+"_tb\n")
file.write("--!\n")
file.write("--!\n")
file.write("\n")
file.write("library ieee;\n")
file.write("use ieee.std_logic_1164.all;\n")
file.write("use ieee.numeric_std.all;\n")
file.write("\n")
file.write("entity "+core_name+"_tb is\n")
file.write("end;\n")
file.write("\n")
file.write("architecture bench of "+core_name+"_tb is\n")
file.write("\n")
file.write("  component "+core_name+"\n")
file.write("	port (\n")
file.write("		-- Inputs --\n")
file.write("		iCLK				: in std_logic; --! se単al de reloj\n")
file.write("		iRST_n 				: in std_logic --! se単al de reset\n")
file.write("		-- Outputs --\n")
file.write("        --oOUT_bit			: out std_logic; \n")
file.write("        --oOUT_vector		: out std_logic_vector(7 downto 0); \n")
file.write("	);\n")
file.write("end component;\n")
file.write("\n")
file.write("  -- Clock period\n")
file.write("  constant clk_period : time := 1 ns;\n")
file.write(" -- Generics\n")
file.write("\n")
file.write("  -- Signals\n")
file.write("  signal clk          : std_logic:= '0';\n")
file.write("  signal rst_n        : std_logic := '0';\n")
file.write("  signal detener      : boolean := false;\n")
file.write("\n")
file.write("begin\n")
file.write("\n")
file.write("  "+core_name+"_inst : "+core_name+"\n")
file.write("  port map (\n")
file.write("    iCLK => clk,\n")
file.write("    iRST_n  => rst_n\n")
file.write("    --oOUT_bit...\n")
file.write("    --oOUT_vector...\n")
file.write("  );\n")
file.write("\n")
file.write("  --Estimulos--\n")
file.write("  main_process: process\n")
file.write("  begin\n")
file.write("\n")
file.write("    wait for 1000 ns;\n")
file.write("   wait;\n")
file.write(" end process main_process;\n")
file.write("\n")
file.write("  reset_process : process\n")
file.write("  begin\n")
file.write("    rst_n   <= '0';\n")
file.write("    wait for 20 ns;\n")
file.write("    rst_n   <= '1';\n")
file.write("    wait for 1000 ns;\n")
file.write("    detener <= true;\n")
file.write("    wait;\n")
file.write("  end process reset_process;\n")
file.write("\n")
file.write("  -- Generacion de reloj\n")
file.write("  gen_reloj_1: process\n")
file.write("  begin\n")
file.write("    clk <= '1';\n")
file.write("    wait for clk_period/2;\n")
file.write("    clk <= '0';\n")
file.write("    wait for clk_period/2;\n")
file.write("    if detener then\n")
file.write("        wait;\n")
file.write("    end if;\n")
file.write("  end process gen_reloj_1;\n")
file.write("\n")
file.write("end;\n")
file.write("\n")
file.close()

#------------------- k_core/doc -------------------
os.makedirs(core_name + '/doc/images', exist_ok=True)

#File: README_development.md
file = open(core_name + "/doc/README_development.md", "w")
file.write("# "+core_name+" : Development\n")
file.write("\n")
file.write("## Introduction\n")
file.write("\n")
file.write("## Diagram\n")
file.write("\n")
file.write("## "+core_name+" module description\n")
file.write("\n")
file.write("## Testbenchs\n")
file.write("\n")
file.close()

#File: README_integration.md
file = open(core_name + "/doc/README_integration.md", "w")
file.write("# "+core_name+" : Integration\n")
file.write("\n")
file.write("## Schemas\n")
file.write("\n")
file.write("## Port description table\n")
file.write("\n")
file.write("### Memory mapped AXI interface\n")
file.write("\n")
file.write("## Other considerations\n")
file.write("\n")
file.write("## Resources utilization\n")
file.write("\n")
file.write("## Common errors\n")
file.write("\n")
file.close()

#File: version.txt
file = open(core_name + "/doc/version.txt", "w")
file.close()

#image = [10001001, 01010000, 01001110, 01000111, 00001101, 00001010, 00011010, 00001010, 00000000, 00000000, 00000000, 00001101, 01001001, 01001000, 01000100, 01010010, 00000000, 00000000, 00000001, 00011110, 00000000, 00000000, 00000000, 10011100, 00001000, 00000110, 00000000, 00000000, 00000000, 10101001, 11000110, 11000100, 10110001, 00000000, 00000000, 00000000, 00011001, 01110100, 01000101, 01011000, 01110100, 01010011, 01101111, 01100110, 01110100, 01110111, 01100001, 01110010, 01100101, 00000000, 01000001, 01100100, 01101111, 01100010, 01100101, 00100000, 01001001, 01101101, 01100001, 01100111,, 01100101, 01010010, 01100101, 01100001, 01100100, 01111001, 01110001, 11001001, 01100101, 00111100, 00000000, 00000000, 00001100, 00010011, 01001001, 01000100, 01000001, 01010100, 01111000, 11011010, 11101100, 10011101, 11000001, 01110001, 00100010, 00111011, 00010011, 11000111, 01100101, 10010111, 00010011, 01100000, 01000011, 01100000, 01000011, 11110000, 01011110, 10111110, 00111011, 00011011, 10000001, 11011111, 01110000, 11100101, 00000110, 00100001, 11011000, 00100001, 01000000, 00001000, 11100110, 11100110, 01110111, 10000100, 00100010, 00000010, 00010011, 10000010, 00001001, 01100001, 00001001, 11100001, 00010001, 00000010, 00011111, 10110010, 10000110, 10000101, 1100010,1 00001011, 11010011, 00101101, 01101001, 00110100, 01100010, 11111000, 11111101, 10101010, 11101100, 01111101, 11110101, 00001010, 00001111, 00110011, 00011010, 11101001, 10101111, 11101110, 01010110, 10110111, 01110100, 10110111, 11011101, 01101110, 00001101, 00000000, 01000000, 01001010, 11101110, 01101001, 00000010, 00000000, 01000000, 01111000, 00000000, 00000000, 11100001, 00000001, 00000000, 01000000, 01111000, 00000000, 00000000, 11100001, 00000001, 00000000, 01000000, 01111000, 00000000, 00000000, 11100001, 00000001, 00000000, 01000000, 01111000, 00000000, 00000000, 11100001, 00000001, 00000000 ,10000100, 00000111, 00000000, 00000000, 11100001, 00000001, 00000000, 10000100, 00000111, 00000000 ]

#------------------- k_core/porject_tcl -------------------
#File: k_core.tcl
file = open(core_name + "/project_tcl/"+core_name+".tcl", "w")
file.write("\n")
file.close()

#File: k_core.tcl
file = open(core_name + "/project_tcl/"+core_name+"_def_val.txt", "w")
file.write("\n")
file.close()

#File: k_core.tcl
file = open(core_name + "/project_tcl/"+core_name+"_dump.txt", "w")
file.write("\n")
file.close()




